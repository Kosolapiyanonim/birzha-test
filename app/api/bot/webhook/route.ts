import { type NextRequest, NextResponse } from "next/server"

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram
export async function POST(request: NextRequest) {
  try {
    const update = await request.json()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const botToken = process.env.BOT_TOKEN
    if (!botToken) {
      return NextResponse.json({ error: "Bot token not configured" }, { status: 500 })
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if (update.message) {
      const chatId = update.message.chat.id
      const text = update.message.text
      const user = update.message.from

      if (text === "/start") {
        await sendWelcomeMessage(chatId, user.first_name, botToken)
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∫–Ω–æ–ø–∫–∏
    if (update.callback_query) {
      const chatId = update.callback_query.message.chat.id
      const data = update.callback_query.data
      const callbackQueryId = update.callback_query.id

      await handleCallbackQuery(chatId, data, callbackQueryId, botToken)
    }

    // –î–æ–±–∞–≤–∏—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é POST –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (update.callback_query?.data?.startsWith("reply_")) {
      const chatId = update.callback_query.data.replace("reply_", "")
      const userId = update.callback_query.from.id

      await handleReplyMode(userId, chatId, botToken)
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç–≤–µ—Ç—ã –≤ —á–∞—Ç–∞—Ö)
    if (update.message?.text && !update.message.text.startsWith("/")) {
      const userId = update.message.from.id
      const messageText = update.message.text

      await handleChatMessage(userId, messageText, botToken)
    }

    return NextResponse.json({ ok: true })
  } catch (error) {
    console.error("Webhook error:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}

async function sendWelcomeMessage(chatId: number, firstName: string, botToken: string) {
  // –ü–æ–ª—É—á–∞–µ–º URL –Ω–∞—à–µ–≥–æ Vercel –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const webappUrl = process.env.VERCEL_URL
    ? `https://${process.env.VERCEL_URL}`
    : process.env.WEBAPP_URL || "https://your-app.vercel.app"

  const message = `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName}!

–≠—Ç–æ –±–∏—Ä–∂–∞ –∑–∞–∫–∞–∑–æ–≤, –≥–¥–µ:
üë®‚Äçüíª –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç —Ä–∞–±–æ—Ç—É  
üßë‚Äçüíº –ó–∞–∫–∞–∑—á–∏–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`

  const keyboard = {
    inline_keyboard: [
      [
        {
          text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å –±–∏—Ä–∂—É",
          web_app: { url: webappUrl },
        },
      ],
      [
        {
          text: "üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
          callback_data: "profile",
        },
        {
          text: "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
          callback_data: "support",
        },
      ],
    ],
  }

  await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text: message,
      reply_markup: keyboard,
    }),
  })
}

async function handleCallbackQuery(chatId: number, data: string, callbackQueryId: string, botToken: string) {
  let responseText = ""

  switch (data) {
    case "profile":
      responseText = "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ WebApp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
      break
    case "support":
      responseText = "üí¨ –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
      break
    default:
      responseText = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
  }

  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
  await fetch(`https://api.telegram.org/bot${botToken}/answerCallbackQuery`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      callback_query_id: callbackQueryId,
      text: "‚úÖ",
    }),
  })

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text: responseText,
    }),
  })
}

async function handleReplyMode(telegramUserId: number, chatId: string, botToken: string) {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
  await fetch(`${process.env.VERCEL_URL || process.env.WEBAPP_URL}/api/bot/set-reply-mode`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ telegramUserId, chatId }),
  })

  await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: telegramUserId,
      text: "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
    }),
  })
}

async function handleChatMessage(telegramUserId: number, messageText: string, botToken: string) {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const response = await fetch(`${process.env.VERCEL_URL || process.env.WEBAPP_URL}/api/bot/process-message`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ telegramUserId, messageText }),
    })

    if (response.ok) {
      await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: telegramUserId,
          text: "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
        }),
      })
    }
  } catch (error) {
    console.error("Error processing chat message:", error)
  }
}
