import { type NextRequest, NextResponse } from "next/server"
import { getSupabaseClient } from "@/lib/supabase"

// –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö ID, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const PROBLEMATIC_IDS = ["2c63b8fb-48a5-409f-b51b-e32037ce93b1"]

export async function POST(request: NextRequest) {
  try {
    const { toId, fromId, message, source } = await request.json()

    console.log("Notification request:", { toId, fromId, message, source })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID –ø—Ä–æ–±–ª–µ–º–Ω—ã–º
    if (PROBLEMATIC_IDS.includes(toId)) {
      console.log("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: ID –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö:", toId)
      return NextResponse.json(
        {
          success: false,
          error: "Notification skipped for problematic ID",
        },
        { status: 200 },
      )
    }

    const botToken = process.env.BOT_TOKEN

    if (!botToken) {
      console.error("Bot token not configured")
      return NextResponse.json({ error: "Bot token not configured" }, { status: 200 })
    }

    const supabase = getSupabaseClient()

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let telegramId: number | null = null

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ toId —É–∂–µ Telegram ID (—á–∏—Å–ª–æ–º)
    const directTelegramId = Number.parseInt(toId)
    if (!isNaN(directTelegramId) && directTelegramId > 0) {
      telegramId = directTelegramId
      console.log("Using direct Telegram ID:", telegramId)
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ UUID, –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      try {
        const { data: user } = await supabase.from("users").select("tg_id").eq("id", toId).single()

        if (user?.tg_id) {
          telegramId = user.tg_id
          console.log("Found Telegram ID from UUID:", telegramId)
        }
      } catch (error) {
        console.error("Error finding user by UUID:", error)
      }
    }

    if (!telegramId) {
      console.warn("Could not find Telegram ID for user:", toId)
      return NextResponse.json(
        {
          success: false,
          error: "Telegram ID not found",
          message: "User does not have a valid Telegram ID",
        },
        { status: 200 },
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    let senderInfo = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    try {
      const senderTelegramId = Number.parseInt(fromId)
      if (!isNaN(senderTelegramId)) {
        const { data: sender } = await supabase.from("users").select("username").eq("tg_id", senderTelegramId).single()

        if (sender?.username) {
          senderInfo = `@${sender.username}`
        }
      } else {
        // –ï—Å–ª–∏ fromId —ç—Ç–æ UUID
        const { data: sender } = await supabase.from("users").select("username").eq("id", fromId).single()

        if (sender?.username) {
          senderInfo = `@${sender.username}`
        }
      }
    } catch (error) {
      console.error("Error getting sender info:", error)
    }

    const webappUrl =
      process.env.WEBAPP_URL ||
      (process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : "https://your-app.vercel.app")

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    const telegramMessage = `üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${senderInfo}:

"${message}"

üìç –ò—Å—Ç–æ—á–Ω–∏–∫: ${source || "—á–∞—Ç"}

üëÜ –û—Ç–≤–µ—Ç–∏—Ç—å –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏`

    const telegramPayload = {
      chat_id: telegramId,
      text: telegramMessage,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç",
              web_app: {
                url: `${webappUrl}/chat/${fromId}?source=${source || "notification"}`,
              },
            },
          ],
        ],
      },
    }

    console.log("Sending to Telegram:", { chat_id: telegramId, message_length: telegramMessage.length })

    try {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(telegramPayload),
      })

      const responseData = await response.json()
      console.log("Telegram API response:", responseData)

      if (!response.ok) {
        console.error("Telegram API error:", responseData)

        // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —á–∞—Ç–æ–º
        if (responseData.error_code === 400 && responseData.description.includes("chat not found")) {
          console.log("Adding to problematic IDs:", toId)
          // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç ID –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        }

        return NextResponse.json(
          {
            success: false,
            error: "Telegram notification failed",
            details: responseData,
          },
          { status: 200 },
        )
      }

      return NextResponse.json({ success: true, data: responseData })
    } catch (fetchError) {
      console.error("Fetch error:", fetchError)
      return NextResponse.json(
        {
          success: false,
          error: "Fetch error",
          details: fetchError.message,
        },
        { status: 200 },
      )
    }
  } catch (error) {
    console.error("Error in notify-message endpoint:", error)
    return NextResponse.json(
      {
        success: false,
        error: "Internal server error",
      },
      { status: 200 },
    )
  }
}
